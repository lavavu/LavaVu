# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info

import os
if 'osmesa' in os.environ.get('LV_CONTEXT', ''):
    from osmesa import _LavaVuPython
else:
    import _LavaVuPython


try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _LavaVuPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _LavaVuPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _LavaVuPython.delete_SwigPyIterator
    value = _swig_new_instance_method(_LavaVuPython.SwigPyIterator_value)
    incr = _swig_new_instance_method(_LavaVuPython.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_LavaVuPython.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_LavaVuPython.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_LavaVuPython.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_LavaVuPython.SwigPyIterator_copy)
    next = _swig_new_instance_method(_LavaVuPython.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_LavaVuPython.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_LavaVuPython.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_LavaVuPython.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_LavaVuPython.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_LavaVuPython.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_LavaVuPython.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_LavaVuPython.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_LavaVuPython.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_LavaVuPython.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _LavaVuPython:
_LavaVuPython.SwigPyIterator_swigregister(SwigPyIterator)
SHARED_PTR_DISOWN = _LavaVuPython.SHARED_PTR_DISOWN
class Line(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_LavaVuPython.Line_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_LavaVuPython.Line___nonzero__)
    __bool__ = _swig_new_instance_method(_LavaVuPython.Line___bool__)
    __len__ = _swig_new_instance_method(_LavaVuPython.Line___len__)
    __getslice__ = _swig_new_instance_method(_LavaVuPython.Line___getslice__)
    __setslice__ = _swig_new_instance_method(_LavaVuPython.Line___setslice__)
    __delslice__ = _swig_new_instance_method(_LavaVuPython.Line___delslice__)
    __delitem__ = _swig_new_instance_method(_LavaVuPython.Line___delitem__)
    __getitem__ = _swig_new_instance_method(_LavaVuPython.Line___getitem__)
    __setitem__ = _swig_new_instance_method(_LavaVuPython.Line___setitem__)
    pop = _swig_new_instance_method(_LavaVuPython.Line_pop)
    append = _swig_new_instance_method(_LavaVuPython.Line_append)
    empty = _swig_new_instance_method(_LavaVuPython.Line_empty)
    size = _swig_new_instance_method(_LavaVuPython.Line_size)
    swap = _swig_new_instance_method(_LavaVuPython.Line_swap)
    begin = _swig_new_instance_method(_LavaVuPython.Line_begin)
    end = _swig_new_instance_method(_LavaVuPython.Line_end)
    rbegin = _swig_new_instance_method(_LavaVuPython.Line_rbegin)
    rend = _swig_new_instance_method(_LavaVuPython.Line_rend)
    clear = _swig_new_instance_method(_LavaVuPython.Line_clear)
    get_allocator = _swig_new_instance_method(_LavaVuPython.Line_get_allocator)
    pop_back = _swig_new_instance_method(_LavaVuPython.Line_pop_back)
    erase = _swig_new_instance_method(_LavaVuPython.Line_erase)

    def __init__(self, *args):
        _LavaVuPython.Line_swiginit(self, _LavaVuPython.new_Line(*args))
    push_back = _swig_new_instance_method(_LavaVuPython.Line_push_back)
    front = _swig_new_instance_method(_LavaVuPython.Line_front)
    back = _swig_new_instance_method(_LavaVuPython.Line_back)
    assign = _swig_new_instance_method(_LavaVuPython.Line_assign)
    resize = _swig_new_instance_method(_LavaVuPython.Line_resize)
    insert = _swig_new_instance_method(_LavaVuPython.Line_insert)
    reserve = _swig_new_instance_method(_LavaVuPython.Line_reserve)
    capacity = _swig_new_instance_method(_LavaVuPython.Line_capacity)
    __swig_destroy__ = _LavaVuPython.delete_Line

# Register Line in _LavaVuPython:
_LavaVuPython.Line_swigregister(Line)
class Array(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_LavaVuPython.Array_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_LavaVuPython.Array___nonzero__)
    __bool__ = _swig_new_instance_method(_LavaVuPython.Array___bool__)
    __len__ = _swig_new_instance_method(_LavaVuPython.Array___len__)
    __getslice__ = _swig_new_instance_method(_LavaVuPython.Array___getslice__)
    __setslice__ = _swig_new_instance_method(_LavaVuPython.Array___setslice__)
    __delslice__ = _swig_new_instance_method(_LavaVuPython.Array___delslice__)
    __delitem__ = _swig_new_instance_method(_LavaVuPython.Array___delitem__)
    __getitem__ = _swig_new_instance_method(_LavaVuPython.Array___getitem__)
    __setitem__ = _swig_new_instance_method(_LavaVuPython.Array___setitem__)
    pop = _swig_new_instance_method(_LavaVuPython.Array_pop)
    append = _swig_new_instance_method(_LavaVuPython.Array_append)
    empty = _swig_new_instance_method(_LavaVuPython.Array_empty)
    size = _swig_new_instance_method(_LavaVuPython.Array_size)
    swap = _swig_new_instance_method(_LavaVuPython.Array_swap)
    begin = _swig_new_instance_method(_LavaVuPython.Array_begin)
    end = _swig_new_instance_method(_LavaVuPython.Array_end)
    rbegin = _swig_new_instance_method(_LavaVuPython.Array_rbegin)
    rend = _swig_new_instance_method(_LavaVuPython.Array_rend)
    clear = _swig_new_instance_method(_LavaVuPython.Array_clear)
    get_allocator = _swig_new_instance_method(_LavaVuPython.Array_get_allocator)
    pop_back = _swig_new_instance_method(_LavaVuPython.Array_pop_back)
    erase = _swig_new_instance_method(_LavaVuPython.Array_erase)

    def __init__(self, *args):
        _LavaVuPython.Array_swiginit(self, _LavaVuPython.new_Array(*args))
    push_back = _swig_new_instance_method(_LavaVuPython.Array_push_back)
    front = _swig_new_instance_method(_LavaVuPython.Array_front)
    back = _swig_new_instance_method(_LavaVuPython.Array_back)
    assign = _swig_new_instance_method(_LavaVuPython.Array_assign)
    resize = _swig_new_instance_method(_LavaVuPython.Array_resize)
    insert = _swig_new_instance_method(_LavaVuPython.Array_insert)
    reserve = _swig_new_instance_method(_LavaVuPython.Array_reserve)
    capacity = _swig_new_instance_method(_LavaVuPython.Array_capacity)
    __swig_destroy__ = _LavaVuPython.delete_Array

# Register Array in _LavaVuPython:
_LavaVuPython.Array_swigregister(Array)
class List(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_LavaVuPython.List_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_LavaVuPython.List___nonzero__)
    __bool__ = _swig_new_instance_method(_LavaVuPython.List___bool__)
    __len__ = _swig_new_instance_method(_LavaVuPython.List___len__)
    __getslice__ = _swig_new_instance_method(_LavaVuPython.List___getslice__)
    __setslice__ = _swig_new_instance_method(_LavaVuPython.List___setslice__)
    __delslice__ = _swig_new_instance_method(_LavaVuPython.List___delslice__)
    __delitem__ = _swig_new_instance_method(_LavaVuPython.List___delitem__)
    __getitem__ = _swig_new_instance_method(_LavaVuPython.List___getitem__)
    __setitem__ = _swig_new_instance_method(_LavaVuPython.List___setitem__)
    pop = _swig_new_instance_method(_LavaVuPython.List_pop)
    append = _swig_new_instance_method(_LavaVuPython.List_append)
    empty = _swig_new_instance_method(_LavaVuPython.List_empty)
    size = _swig_new_instance_method(_LavaVuPython.List_size)
    swap = _swig_new_instance_method(_LavaVuPython.List_swap)
    begin = _swig_new_instance_method(_LavaVuPython.List_begin)
    end = _swig_new_instance_method(_LavaVuPython.List_end)
    rbegin = _swig_new_instance_method(_LavaVuPython.List_rbegin)
    rend = _swig_new_instance_method(_LavaVuPython.List_rend)
    clear = _swig_new_instance_method(_LavaVuPython.List_clear)
    get_allocator = _swig_new_instance_method(_LavaVuPython.List_get_allocator)
    pop_back = _swig_new_instance_method(_LavaVuPython.List_pop_back)
    erase = _swig_new_instance_method(_LavaVuPython.List_erase)

    def __init__(self, *args):
        _LavaVuPython.List_swiginit(self, _LavaVuPython.new_List(*args))
    push_back = _swig_new_instance_method(_LavaVuPython.List_push_back)
    front = _swig_new_instance_method(_LavaVuPython.List_front)
    back = _swig_new_instance_method(_LavaVuPython.List_back)
    assign = _swig_new_instance_method(_LavaVuPython.List_assign)
    resize = _swig_new_instance_method(_LavaVuPython.List_resize)
    insert = _swig_new_instance_method(_LavaVuPython.List_insert)
    reserve = _swig_new_instance_method(_LavaVuPython.List_reserve)
    capacity = _swig_new_instance_method(_LavaVuPython.List_capacity)
    __swig_destroy__ = _LavaVuPython.delete_List

# Register List in _LavaVuPython:
_LavaVuPython.List_swigregister(List)
class GeomList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_LavaVuPython.GeomList_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_LavaVuPython.GeomList___nonzero__)
    __bool__ = _swig_new_instance_method(_LavaVuPython.GeomList___bool__)
    __len__ = _swig_new_instance_method(_LavaVuPython.GeomList___len__)
    __getslice__ = _swig_new_instance_method(_LavaVuPython.GeomList___getslice__)
    __setslice__ = _swig_new_instance_method(_LavaVuPython.GeomList___setslice__)
    __delslice__ = _swig_new_instance_method(_LavaVuPython.GeomList___delslice__)
    __delitem__ = _swig_new_instance_method(_LavaVuPython.GeomList___delitem__)
    __getitem__ = _swig_new_instance_method(_LavaVuPython.GeomList___getitem__)
    __setitem__ = _swig_new_instance_method(_LavaVuPython.GeomList___setitem__)
    pop = _swig_new_instance_method(_LavaVuPython.GeomList_pop)
    append = _swig_new_instance_method(_LavaVuPython.GeomList_append)
    empty = _swig_new_instance_method(_LavaVuPython.GeomList_empty)
    size = _swig_new_instance_method(_LavaVuPython.GeomList_size)
    swap = _swig_new_instance_method(_LavaVuPython.GeomList_swap)
    begin = _swig_new_instance_method(_LavaVuPython.GeomList_begin)
    end = _swig_new_instance_method(_LavaVuPython.GeomList_end)
    rbegin = _swig_new_instance_method(_LavaVuPython.GeomList_rbegin)
    rend = _swig_new_instance_method(_LavaVuPython.GeomList_rend)
    clear = _swig_new_instance_method(_LavaVuPython.GeomList_clear)
    get_allocator = _swig_new_instance_method(_LavaVuPython.GeomList_get_allocator)
    pop_back = _swig_new_instance_method(_LavaVuPython.GeomList_pop_back)
    erase = _swig_new_instance_method(_LavaVuPython.GeomList_erase)

    def __init__(self, *args):
        _LavaVuPython.GeomList_swiginit(self, _LavaVuPython.new_GeomList(*args))
    push_back = _swig_new_instance_method(_LavaVuPython.GeomList_push_back)
    front = _swig_new_instance_method(_LavaVuPython.GeomList_front)
    back = _swig_new_instance_method(_LavaVuPython.GeomList_back)
    assign = _swig_new_instance_method(_LavaVuPython.GeomList_assign)
    resize = _swig_new_instance_method(_LavaVuPython.GeomList_resize)
    insert = _swig_new_instance_method(_LavaVuPython.GeomList_insert)
    reserve = _swig_new_instance_method(_LavaVuPython.GeomList_reserve)
    capacity = _swig_new_instance_method(_LavaVuPython.GeomList_capacity)
    __swig_destroy__ = _LavaVuPython.delete_GeomList

# Register GeomList in _LavaVuPython:
_LavaVuPython.GeomList_swigregister(GeomList)
class ByteArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_LavaVuPython.ByteArray_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_LavaVuPython.ByteArray___nonzero__)
    __bool__ = _swig_new_instance_method(_LavaVuPython.ByteArray___bool__)
    __len__ = _swig_new_instance_method(_LavaVuPython.ByteArray___len__)
    __getslice__ = _swig_new_instance_method(_LavaVuPython.ByteArray___getslice__)
    __setslice__ = _swig_new_instance_method(_LavaVuPython.ByteArray___setslice__)
    __delslice__ = _swig_new_instance_method(_LavaVuPython.ByteArray___delslice__)
    __delitem__ = _swig_new_instance_method(_LavaVuPython.ByteArray___delitem__)
    __getitem__ = _swig_new_instance_method(_LavaVuPython.ByteArray___getitem__)
    __setitem__ = _swig_new_instance_method(_LavaVuPython.ByteArray___setitem__)
    pop = _swig_new_instance_method(_LavaVuPython.ByteArray_pop)
    append = _swig_new_instance_method(_LavaVuPython.ByteArray_append)
    empty = _swig_new_instance_method(_LavaVuPython.ByteArray_empty)
    size = _swig_new_instance_method(_LavaVuPython.ByteArray_size)
    swap = _swig_new_instance_method(_LavaVuPython.ByteArray_swap)
    begin = _swig_new_instance_method(_LavaVuPython.ByteArray_begin)
    end = _swig_new_instance_method(_LavaVuPython.ByteArray_end)
    rbegin = _swig_new_instance_method(_LavaVuPython.ByteArray_rbegin)
    rend = _swig_new_instance_method(_LavaVuPython.ByteArray_rend)
    clear = _swig_new_instance_method(_LavaVuPython.ByteArray_clear)
    get_allocator = _swig_new_instance_method(_LavaVuPython.ByteArray_get_allocator)
    pop_back = _swig_new_instance_method(_LavaVuPython.ByteArray_pop_back)
    erase = _swig_new_instance_method(_LavaVuPython.ByteArray_erase)

    def __init__(self, *args):
        _LavaVuPython.ByteArray_swiginit(self, _LavaVuPython.new_ByteArray(*args))
    push_back = _swig_new_instance_method(_LavaVuPython.ByteArray_push_back)
    front = _swig_new_instance_method(_LavaVuPython.ByteArray_front)
    back = _swig_new_instance_method(_LavaVuPython.ByteArray_back)
    assign = _swig_new_instance_method(_LavaVuPython.ByteArray_assign)
    resize = _swig_new_instance_method(_LavaVuPython.ByteArray_resize)
    insert = _swig_new_instance_method(_LavaVuPython.ByteArray_insert)
    reserve = _swig_new_instance_method(_LavaVuPython.ByteArray_reserve)
    capacity = _swig_new_instance_method(_LavaVuPython.ByteArray_capacity)
    __swig_destroy__ = _LavaVuPython.delete_ByteArray

# Register ByteArray in _LavaVuPython:
_LavaVuPython.ByteArray_swigregister(ByteArray)
lucMinType = _LavaVuPython.lucMinType
lucLabelType = _LavaVuPython.lucLabelType
lucPointType = _LavaVuPython.lucPointType
lucGridType = _LavaVuPython.lucGridType
lucTriangleType = _LavaVuPython.lucTriangleType
lucVectorType = _LavaVuPython.lucVectorType
lucTracerType = _LavaVuPython.lucTracerType
lucLineType = _LavaVuPython.lucLineType
lucShapeType = _LavaVuPython.lucShapeType
lucVolumeType = _LavaVuPython.lucVolumeType
lucScreenType = _LavaVuPython.lucScreenType
lucMaxType = _LavaVuPython.lucMaxType
lucMinDataType = _LavaVuPython.lucMinDataType
lucVertexData = _LavaVuPython.lucVertexData
lucNormalData = _LavaVuPython.lucNormalData
lucVectorData = _LavaVuPython.lucVectorData
lucColourValueData = _LavaVuPython.lucColourValueData
lucOpacityValueData = _LavaVuPython.lucOpacityValueData
lucRedValueData = _LavaVuPython.lucRedValueData
lucGreenValueData = _LavaVuPython.lucGreenValueData
lucBlueValueData = _LavaVuPython.lucBlueValueData
lucIndexData = _LavaVuPython.lucIndexData
lucXWidthData = _LavaVuPython.lucXWidthData
lucYHeightData = _LavaVuPython.lucYHeightData
lucZLengthData = _LavaVuPython.lucZLengthData
lucRGBAData = _LavaVuPython.lucRGBAData
lucTexCoordData = _LavaVuPython.lucTexCoordData
lucSizeData = _LavaVuPython.lucSizeData
lucLuminanceData = _LavaVuPython.lucLuminanceData
lucRGBData = _LavaVuPython.lucRGBData
lucMaxDataType = _LavaVuPython.lucMaxDataType
class Colour(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    rgba = property(_LavaVuPython.Colour_rgba_get, _LavaVuPython.Colour_rgba_set)
    value = property(_LavaVuPython.Colour_value_get, _LavaVuPython.Colour_value_set)
    fvalue = property(_LavaVuPython.Colour_fvalue_get, _LavaVuPython.Colour_fvalue_set)

    def __init__(self, *args):
        _LavaVuPython.Colour_swiginit(self, _LavaVuPython.new_Colour(*args))
    fromRGBA = _swig_new_instance_method(_LavaVuPython.Colour_fromRGBA)
    fromJSON = _swig_new_instance_method(_LavaVuPython.Colour_fromJSON)
    fromString = _swig_new_instance_method(_LavaVuPython.Colour_fromString)
    fromX11Colour = _swig_new_instance_method(_LavaVuPython.Colour_fromX11Colour)
    fromHex = _swig_new_instance_method(_LavaVuPython.Colour_fromHex)
    invert = _swig_new_instance_method(_LavaVuPython.Colour_invert)
    toJson = _swig_new_instance_method(_LavaVuPython.Colour_toJson)
    toString = _swig_new_instance_method(_LavaVuPython.Colour_toString)
    toArray = _swig_new_instance_method(_LavaVuPython.Colour_toArray)
    __swig_destroy__ = _LavaVuPython.delete_Colour

# Register Colour in _LavaVuPython:
_LavaVuPython.Colour_swigregister(Colour)
class OpenGLViewer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    quitProgram = property(_LavaVuPython.OpenGLViewer_quitProgram_get, _LavaVuPython.OpenGLViewer_quitProgram_set)
    isopen = property(_LavaVuPython.OpenGLViewer_isopen_get, _LavaVuPython.OpenGLViewer_isopen_set)
    postdisplay = property(_LavaVuPython.OpenGLViewer_postdisplay_get, _LavaVuPython.OpenGLViewer_postdisplay_set)
    nodisplay = property(_LavaVuPython.OpenGLViewer_nodisplay_get, _LavaVuPython.OpenGLViewer_nodisplay_set)
    visible = property(_LavaVuPython.OpenGLViewer_visible_get, _LavaVuPython.OpenGLViewer_visible_set)
    width = property(_LavaVuPython.OpenGLViewer_width_get, _LavaVuPython.OpenGLViewer_width_set)
    height = property(_LavaVuPython.OpenGLViewer_height_get, _LavaVuPython.OpenGLViewer_height_set)
    timer_animate = property(_LavaVuPython.OpenGLViewer_timer_animate_get, _LavaVuPython.OpenGLViewer_timer_animate_set)
    output_path = property(_LavaVuPython.OpenGLViewer_output_path_get, _LavaVuPython.OpenGLViewer_output_path_set)
    mouseState = property(_LavaVuPython.OpenGLViewer_mouseState_get, _LavaVuPython.OpenGLViewer_mouseState_set)
    mouseX = property(_LavaVuPython.OpenGLViewer_mouseX_get, _LavaVuPython.OpenGLViewer_mouseX_set)
    mouseY = property(_LavaVuPython.OpenGLViewer_mouseY_get, _LavaVuPython.OpenGLViewer_mouseY_set)
    open = _swig_new_instance_method(_LavaVuPython.OpenGLViewer_open)
    init = _swig_new_instance_method(_LavaVuPython.OpenGLViewer_init)
    display = _swig_new_instance_method(_LavaVuPython.OpenGLViewer_display)
    show = _swig_new_instance_method(_LavaVuPython.OpenGLViewer_show)
    hide = _swig_new_instance_method(_LavaVuPython.OpenGLViewer_hide)
    title = _swig_new_instance_method(_LavaVuPython.OpenGLViewer_title)
    execute = _swig_new_instance_method(_LavaVuPython.OpenGLViewer_execute)
    events = _swig_new_instance_method(_LavaVuPython.OpenGLViewer_events)
    loop = _swig_new_instance_method(_LavaVuPython.OpenGLViewer_loop)
    downSample = _swig_new_instance_method(_LavaVuPython.OpenGLViewer_downSample)
    multiSample = _swig_new_instance_method(_LavaVuPython.OpenGLViewer_multiSample)
    animateTimer = _swig_new_instance_method(_LavaVuPython.OpenGLViewer_animateTimer)

    def __init__(self):
        _LavaVuPython.OpenGLViewer_swiginit(self, _LavaVuPython.new_OpenGLViewer())
    __swig_destroy__ = _LavaVuPython.delete_OpenGLViewer

# Register OpenGLViewer in _LavaVuPython:
_LavaVuPython.OpenGLViewer_swigregister(OpenGLViewer)
cvar = _LavaVuPython.cvar
version = cvar.version

class DrawingObject(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _LavaVuPython.DrawingObject_swiginit(self, _LavaVuPython.new_DrawingObject(*args))
    colourMap = property(_LavaVuPython.DrawingObject_colourMap_get, _LavaVuPython.DrawingObject_colourMap_set)
    opacityMap = property(_LavaVuPython.DrawingObject_opacityMap_get, _LavaVuPython.DrawingObject_opacityMap_set)
    getColourMap = _swig_new_instance_method(_LavaVuPython.DrawingObject_getColourMap)
    name = _swig_new_instance_method(_LavaVuPython.DrawingObject_name)
    opacity = property(_LavaVuPython.DrawingObject_opacity_get, _LavaVuPython.DrawingObject_opacity_set)
    colour = property(_LavaVuPython.DrawingObject_colour_get, _LavaVuPython.DrawingObject_colour_set)
    __swig_destroy__ = _LavaVuPython.delete_DrawingObject

# Register DrawingObject in _LavaVuPython:
_LavaVuPython.DrawingObject_swigregister(DrawingObject)
class Model(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    fignames = property(_LavaVuPython.Model_fignames_get, _LavaVuPython.Model_fignames_set)
    figures = property(_LavaVuPython.Model_figures_get, _LavaVuPython.Model_figures_set)
    figure = property(_LavaVuPython.Model_figure_get, _LavaVuPython.Model_figure_set)

    def __init__(self, session):
        _LavaVuPython.Model_swiginit(self, _LavaVuPython.new_Model(session))
    __swig_destroy__ = _LavaVuPython.delete_Model

# Register Model in _LavaVuPython:
_LavaVuPython.Model_swigregister(Model)
class ColourMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    name = property(_LavaVuPython.ColourMap_name_get, _LavaVuPython.ColourMap_name_set)

    def __init__(self, *args):
        _LavaVuPython.ColourMap_swiginit(self, _LavaVuPython.new_ColourMap(*args))
    flip = _swig_new_instance_method(_LavaVuPython.ColourMap_flip)
    monochrome = _swig_new_instance_method(_LavaVuPython.ColourMap_monochrome)
    getDefaultMapNames = _swig_new_static_method(_LavaVuPython.ColourMap_getDefaultMapNames)
    getDefaultMap = _swig_new_static_method(_LavaVuPython.ColourMap_getDefaultMap)
    __swig_destroy__ = _LavaVuPython.delete_ColourMap

# Register ColourMap in _LavaVuPython:
_LavaVuPython.ColourMap_swigregister(ColourMap)
class GeomData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    width = property(_LavaVuPython.GeomData_width_get, _LavaVuPython.GeomData_width_set)
    height = property(_LavaVuPython.GeomData_height_get, _LavaVuPython.GeomData_height_set)
    depth = property(_LavaVuPython.GeomData_depth_get, _LavaVuPython.GeomData_depth_set)
    step = property(_LavaVuPython.GeomData_step_get, _LavaVuPython.GeomData_step_set)
    type = property(_LavaVuPython.GeomData_type_get, _LavaVuPython.GeomData_type_set)

    def __init__(self, draw, type):
        _LavaVuPython.GeomData_swiginit(self, _LavaVuPython.new_GeomData(draw, type))
    __swig_destroy__ = _LavaVuPython.delete_GeomData

# Register GeomData in _LavaVuPython:
_LavaVuPython.GeomData_swigregister(GeomData)
class LavaVu(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    viewer = property(_LavaVuPython.LavaVu_viewer_get, _LavaVuPython.LavaVu_viewer_set)
    amodel = property(_LavaVuPython.LavaVu_amodel_get, _LavaVuPython.LavaVu_amodel_set)
    aview = property(_LavaVuPython.LavaVu_aview_get, _LavaVuPython.LavaVu_aview_set)
    aobject = property(_LavaVuPython.LavaVu_aobject_get, _LavaVuPython.LavaVu_aobject_set)
    binpath = property(_LavaVuPython.LavaVu_binpath_get, _LavaVuPython.LavaVu_binpath_set)
    unprocessed = property(_LavaVuPython.LavaVu_unprocessed_get, _LavaVuPython.LavaVu_unprocessed_set)

    def __init__(self, binpath, havecontext=False):
        _LavaVuPython.LavaVu_swiginit(self, _LavaVuPython.new_LavaVu(binpath, havecontext))
    __swig_destroy__ = _LavaVuPython.delete_LavaVu
    destroy = _swig_new_instance_method(_LavaVuPython.LavaVu_destroy)
    resize = _swig_new_instance_method(_LavaVuPython.LavaVu_resize)
    run = _swig_new_instance_method(_LavaVuPython.LavaVu_run)
    serialize = _swig_new_instance_method(_LavaVuPython.LavaVu_serialize)
    deserialize = _swig_new_instance_method(_LavaVuPython.LavaVu_deserialize)
    printall = _swig_new_instance_method(_LavaVuPython.LavaVu_printall)
    loadFile = _swig_new_instance_method(_LavaVuPython.LavaVu_loadFile)
    parseProperty = _swig_new_instance_method(_LavaVuPython.LavaVu_parseProperty)
    parseCommands = _swig_new_instance_method(_LavaVuPython.LavaVu_parseCommands)
    gl_version = _swig_new_instance_method(_LavaVuPython.LavaVu_gl_version)
    image = _swig_new_instance_method(_LavaVuPython.LavaVu_image)
    web = _swig_new_instance_method(_LavaVuPython.LavaVu_web)
    video = _swig_new_instance_method(_LavaVuPython.LavaVu_video)
    encodeVideo = _swig_new_instance_method(_LavaVuPython.LavaVu_encodeVideo)
    pauseVideo = _swig_new_instance_method(_LavaVuPython.LavaVu_pauseVideo)
    defaultModel = _swig_new_instance_method(_LavaVuPython.LavaVu_defaultModel)
    addColourMap = _swig_new_instance_method(_LavaVuPython.LavaVu_addColourMap)
    updateColourMap = _swig_new_instance_method(_LavaVuPython.LavaVu_updateColourMap)
    getColourMap = _swig_new_instance_method(_LavaVuPython.LavaVu_getColourMap)
    setColourMap = _swig_new_instance_method(_LavaVuPython.LavaVu_setColourMap)
    colourBar = _swig_new_instance_method(_LavaVuPython.LavaVu_colourBar)
    setState = _swig_new_instance_method(_LavaVuPython.LavaVu_setState)
    getState = _swig_new_instance_method(_LavaVuPython.LavaVu_getState)
    getTimeSteps = _swig_new_instance_method(_LavaVuPython.LavaVu_getTimeSteps)
    addTimeStep = _swig_new_instance_method(_LavaVuPython.LavaVu_addTimeStep)
    resetViews = _swig_new_instance_method(_LavaVuPython.LavaVu_resetViews)
    addViewport = _swig_new_instance_method(_LavaVuPython.LavaVu_addViewport)
    setObject = _swig_new_instance_method(_LavaVuPython.LavaVu_setObject)
    createObject = _swig_new_instance_method(_LavaVuPython.LavaVu_createObject)
    getObject = _swig_new_instance_method(_LavaVuPython.LavaVu_getObject)
    reloadObject = _swig_new_instance_method(_LavaVuPython.LavaVu_reloadObject)
    appendToObject = _swig_new_instance_method(_LavaVuPython.LavaVu_appendToObject)
    loadTriangles = _swig_new_instance_method(_LavaVuPython.LavaVu_loadTriangles)
    loadColours = _swig_new_instance_method(_LavaVuPython.LavaVu_loadColours)
    loadLabels = _swig_new_instance_method(_LavaVuPython.LavaVu_loadLabels)
    clearAll = _swig_new_instance_method(_LavaVuPython.LavaVu_clearAll)
    clearObject = _swig_new_instance_method(_LavaVuPython.LavaVu_clearObject)
    clearValues = _swig_new_instance_method(_LavaVuPython.LavaVu_clearValues)
    clearData = _swig_new_instance_method(_LavaVuPython.LavaVu_clearData)
    getObjectDataLabels = _swig_new_instance_method(_LavaVuPython.LavaVu_getObjectDataLabels)
    arrayUChar = _swig_new_instance_method(_LavaVuPython.LavaVu_arrayUChar)
    arrayUInt = _swig_new_instance_method(_LavaVuPython.LavaVu_arrayUInt)
    arrayFloat = _swig_new_instance_method(_LavaVuPython.LavaVu_arrayFloat)
    clearTexture = _swig_new_instance_method(_LavaVuPython.LavaVu_clearTexture)
    setTexture = _swig_new_instance_method(_LavaVuPython.LavaVu_setTexture)
    textureUChar = _swig_new_instance_method(_LavaVuPython.LavaVu_textureUChar)
    textureUInt = _swig_new_instance_method(_LavaVuPython.LavaVu_textureUInt)
    getGeometry = _swig_new_instance_method(_LavaVuPython.LavaVu_getGeometry)
    getGeometryAt = _swig_new_instance_method(_LavaVuPython.LavaVu_getGeometryAt)
    getBoundingBox = _swig_new_instance_method(_LavaVuPython.LavaVu_getBoundingBox)
    geometryArrayUChar = _swig_new_instance_method(_LavaVuPython.LavaVu_geometryArrayUChar)
    geometryArrayUInt = _swig_new_instance_method(_LavaVuPython.LavaVu_geometryArrayUInt)
    geometryArrayFloat = _swig_new_instance_method(_LavaVuPython.LavaVu_geometryArrayFloat)
    colourArrayFloat = _swig_new_instance_method(_LavaVuPython.LavaVu_colourArrayFloat)
    geometryArrayViewFloat = _swig_new_instance_method(_LavaVuPython.LavaVu_geometryArrayViewFloat)
    geometryArrayViewUInt = _swig_new_instance_method(_LavaVuPython.LavaVu_geometryArrayViewUInt)
    geometryArrayViewUChar = _swig_new_instance_method(_LavaVuPython.LavaVu_geometryArrayViewUChar)
    imageBuffer = _swig_new_instance_method(_LavaVuPython.LavaVu_imageBuffer)
    imageFromFile = _swig_new_instance_method(_LavaVuPython.LavaVu_imageFromFile)
    imageJPEG = _swig_new_instance_method(_LavaVuPython.LavaVu_imageJPEG)
    imagePNG = _swig_new_instance_method(_LavaVuPython.LavaVu_imagePNG)
    contour = _swig_new_instance_method(_LavaVuPython.LavaVu_contour)
    isoSurface = _swig_new_instance_method(_LavaVuPython.LavaVu_isoSurface)
    update = _swig_new_instance_method(_LavaVuPython.LavaVu_update)
    close = _swig_new_instance_method(_LavaVuPython.LavaVu_close)
    imageArray = _swig_new_instance_method(_LavaVuPython.LavaVu_imageArray)
    imageDiff = _swig_new_instance_method(_LavaVuPython.LavaVu_imageDiff)
    queueCommands = _swig_new_instance_method(_LavaVuPython.LavaVu_queueCommands)
    helpCommand = _swig_new_instance_method(_LavaVuPython.LavaVu_helpCommand)
    commandList = _swig_new_instance_method(_LavaVuPython.LavaVu_commandList)
    propertyList = _swig_new_instance_method(_LavaVuPython.LavaVu_propertyList)

# Register LavaVu in _LavaVuPython:
_LavaVuPython.LavaVu_swigregister(LavaVu)
rawImageWrite = _LavaVuPython.rawImageWrite
class VideoEncoder(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    filename = property(_LavaVuPython.VideoEncoder_filename_get, _LavaVuPython.VideoEncoder_filename_set)

    def __init__(self, fn, fps, quality=3):
        _LavaVuPython.VideoEncoder_swiginit(self, _LavaVuPython.new_VideoEncoder(fn, fps, quality))
    __swig_destroy__ = _LavaVuPython.delete_VideoEncoder
    open = _swig_new_instance_method(_LavaVuPython.VideoEncoder_open)
    close = _swig_new_instance_method(_LavaVuPython.VideoEncoder_close)
    resize = _swig_new_instance_method(_LavaVuPython.VideoEncoder_resize)
    display = _swig_new_instance_method(_LavaVuPython.VideoEncoder_display)
    copyframe = _swig_new_instance_method(_LavaVuPython.VideoEncoder_copyframe)

# Register VideoEncoder in _LavaVuPython:
_LavaVuPython.VideoEncoder_swigregister(VideoEncoder)

